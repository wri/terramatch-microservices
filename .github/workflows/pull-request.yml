name: Pull Request

env:
  HUSKY: 0
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

on:
  pull_request:

permissions:
  actions: read
  contents: read

jobs:
  build-lint-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: KengoTODA/actions-setup-docker-compose@v1
        with:
          version: "2.29.1"

      # This enables task distribution via Nx Cloud
      # Run this command as early as possible, before dependencies are installed
      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun
      - run: npx nx-cloud start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="build"

      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - run: npm ci --legacy-peer-deps

      - run: NX_CLOUD_DISTRIBUTED_EXECUTION=false npx nx run-many -t lint build

      - name: Bring up DB Docker Container
        run: |
          docker-compose up -d
          ./docker/test-connection.sh

      # First run just the small database test to get the test database synced to the current schema
      # in a clean way. For some reason, the `run-many` is necessary here. If this line simply uses
      # nx test database, the connection to the DB gets cut off before the sync is complete.
      - name: Sync DB Schema
        run: NX_CLOUD_DISTRIBUTED_EXECUTION=false npx nx test database --skip-nx-cache

      # Run the UDB service tests in isolation because they require clearing out DB tables and ensuring
      # they know exactly what's in them, which is not conducive to parallel runs with other test
      # suites.
      - name: Unified DB Test
        run: NX_CLOUD_DISTRIBUTED_EXECUTION=false npx nx test unified-database-service --coverage

      - name: Test all
        run: NX_CLOUD_DISTRIBUTED_EXECUTION=false npx nx run-many -t test --coverage --passWithNoTests --exclude unified-database-service database
