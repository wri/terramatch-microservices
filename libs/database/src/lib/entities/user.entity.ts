import {
  BaseEntity,
  Column,
  CreateDateColumn,
  DeleteDateColumn,
  Entity, In,
  Index,
  JoinColumn, JoinTable,
  ManyToMany,
  OneToOne,
  PrimaryGeneratedColumn,
  UpdateDateColumn
} from 'typeorm';
import { Organisation } from './organisation.entity';
import { Role } from './role.entity';
import { Permission } from './permission.entity';
import { Project } from './project.entity';
import { Framework } from './framework.entity';

// Note: this has some additional typing information (like width: 1 on bools and type: timestamps on
//   CreateDateColumn) to make the types generated here match what is generated by Laravel exactly.
//   At this time, we want TypeORM to expect exactly the same types that PHP uses by default. Tested
//   by checking what schema gets generated in the test database against the real DB during unit
//   test runs (the only time we let TypeORM modify the DB schema).
@Entity({ name: 'users' })
export class User extends BaseEntity {
  @PrimaryGeneratedColumn({ type: 'bigint', unsigned: true })
  id: number;

  // There are many rows in the prod DB without a UUID assigned, so this cannot be a unique
  // index until that is fixed.
  @Column({ type: 'char', width: 36 })
  @Index()
  uuid: string;

  @CreateDateColumn({ type: 'timestamp', name: 'created_at' })
  createdAt: Date;

  @UpdateDateColumn({ type: 'timestamp', name: 'updated_at' })
  updatedAt: Date;

  @DeleteDateColumn({ type: 'timestamp', name: 'deleted_at' })
  deletedAt: Date;

  @Column({ type: 'bigint', name: 'organisation_id', nullable: true, unsigned: true })
  organisationId: number | null;

  @Column({ name: 'first_name', nullable: true })
  firstName: string | null;

  @Column({ name: 'last_name', nullable: true })
  lastName: string | null;

  @Column({ name: 'email_address', unique: true })
  emailAddress: string;

  @Column({ nullable: true })
  password: string | null;

  @Column({ name: 'email_address_verified_at', nullable: true })
  emailAddressVerifiedAt: Date | null;

  @Column({ name: 'last_logged_in_at', nullable: true })
  lastLoggedInAt: Date | null;

  @Column({ name: 'job_role', nullable: true })
  jobRole: string | null;

  @Column({ nullable: true })
  facebook: string | null;

  @Column({ nullable: true })
  twitter: string | null;

  @Column({ nullable: true })
  linkedin: string | null;

  @Column({ nullable: true })
  instagram: string | null;

  @Column({ nullable: true })
  avatar: string | null;

  @Column({ name: 'phone_number', nullable: true })
  phoneNumber: string | null;

  @Column({ name: 'whatsapp_phone', nullable: true })
  whatsappPhone: string | null;

  @Column({ width: 1, name: 'is_subscribed', default: true })
  isSubscribed: boolean;

  @Column({ width: 1, name: 'has_consented', default: true })
  hasConsented: boolean;

  @Column({ nullable: true })
  banners: string | null;

  @Column({ name: 'api_key', nullable: true })
  apiKey: string | null;

  @Column({ nullable: true })
  country: string | null;

  @Column({ nullable: true })
  program: string | null;

  @Column()
  locale: string;

  // Relations

  @OneToOne(() => Organisation, { nullable: true })
  @JoinColumn({ name: 'organisation_id' })
  organisation: Promise<Organisation | null>

  organisations() {
    return Organisation.createQueryBuilder('o')
      .innerJoin('organisation_user', 'ou', 'ou.organisation_id = o.id')
      .where('ou.user_id = :userId', { userId: this.id })
  }

  organisationsConfirmed() {
    return this.organisations().andWhere('ou.status = :status', { status: 'approved' })
  }

  organisationsRequested() {
    return this.organisations().andWhere('ou.status = :status', { status: 'requested' })
  }

  async primaryOrganisation() {
    let org = await this.organisation;
    if (org != null) return org;

    org = await this.organisationsConfirmed().getOne();
    if (org != null) return org;

    return await this.organisationsRequested().getOne();
  }

  async primaryRole() {
    const roles = await Role.getUserRoleNames(this.id);
    return roles?.[0];
  }

  async frameworks(): Promise<{ name: string, slug: string }[]> {
    // TODO: Once the Framework and Project tables have been ported over, this should
    //  use those entities and associations instead of this set of raw SQL queries.
    const roles = await Role.getUserRoleNames(this.id);
    const isAdmin = roles.find(role => role.startsWith('admin-')) != null;

    let frameworkSlugs;
    if (isAdmin) {
      // Admins have access to all frameworks their permissions say they do
      const permissions = await Permission.getUserPermissionNames(this.id);
      const offset = 'framework-'.length;
      frameworkSlugs = permissions
        .filter(permission => permission.startsWith('framework-'))
        .map(permission => permission.substring(offset))
    } else {
      // Other users have access to the frameworks embodied by their set of projects
      frameworkSlugs = (await Project.createQueryBuilder('p')
        .innerJoin('v2_project_users', 'pu', 'p.id = pu.project_id')
        .where('pu.user_id = :userId', { userId: this.id })
        .andWhere('p.deleted_at is null')
        .select('p.framework_key')
        .distinct()
        .getRawMany())
        .map(({ framework_key }) => framework_key)
    }

    return (await Framework.createQueryBuilder('f')
      .select(['slug', 'name'])
      .where({ slug: In(frameworkSlugs) })
      .getRawMany())
      .map(({ slug, name }) => ({ slug, name }))
  }
}
